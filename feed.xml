<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://jotasic.github.io/</id><title>Tasic's blog</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-12-18T21:15:50+09:00</updated> <author> <name>Taewoo Kim</name> <uri>https://jotasic.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://jotasic.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko" href="https://jotasic.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2021 Taewoo Kim </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Javascript Iterable, iterator, generator</title><link href="https://jotasic.github.io/posts/JS-Iterable/" rel="alternate" type="text/html" title="Javascript Iterable, iterator, generator" /><published>2021-12-18T21:00:00+09:00</published> <updated>2021-12-18T21:15:28+09:00</updated> <id>https://jotasic.github.io/posts/JS-Iterable/</id> <content src="https://jotasic.github.io/posts/JS-Iterable/" /> <author> <name>Taewoo Kim</name> </author> <category term="강의정리" /> <category term="Javascript ES6+ 제대로 알아보기 - 중급" /> <summary> 들어가며 이 내용은 Javascript ES6+ 제대로 알아보기 - 중급 강의 중 Iterable, iterator, generator를 정리한 내용 입니다. 강의링크 Iterable 내부 요소들을 공개적으로 탐색(반복) 할 수 있는 데이터 구조로 [Symbol.iterator]메소드를 가지고 있다. [Symbol.iterator]를 실행한 결과를 가지고, next()를 반복 호출하는 로직을 기반으로 Array.from, spread operator, for .. of 등의 기능들을 실행한다. 기본적으로 내장하고 있는 객체는 array, map, set, string 등이 있다. 사용자가 규칙에 맞게 [Symbol.iterator]를 구현하면 Iterable한 객체가 될 수 있다. ... </summary> </entry> <entry><title>Javascript Symbol</title><link href="https://jotasic.github.io/posts/JS-Symbol/" rel="alternate" type="text/html" title="Javascript Symbol" /><published>2021-12-17T23:20:00+09:00</published> <updated>2021-12-18T21:15:28+09:00</updated> <id>https://jotasic.github.io/posts/JS-Symbol/</id> <content src="https://jotasic.github.io/posts/JS-Symbol/" /> <author> <name>Taewoo Kim</name> </author> <category term="강의정리" /> <category term="Javascript ES6+ 제대로 알아보기 - 중급" /> <summary> 들어가며 이 내용은 Javascript ES6+ 제대로 알아보기 - 중급 강의 중 Symbol를 정리한 내용 입니다. 강의링크 Symbol ES6에서 새로 추가된 자료형 유일무이하고 고유한 존재 비공개 멤버에 대한 요구에서 탄생 기본적인 열거대상에서 제외 암묵적 형변환 불가 유일무의하고 고유한 존재 Symbol를 생성할 때 같은 string을 부여한다해도 둘을 다르다고 평가한다. 따라서 생성할 때 Symbol을 저장하고 있는 변수가 계속 필요하다. const sy1 = Symbol('symbol'); const sy2 = Symbol('symbol'); sy1 === sy2; // false Symbol를 이용한 비공개 멤버 구현 obj라는 함수는 객체... </summary> </entry> <entry><title>Javascript Arrow Function</title><link href="https://jotasic.github.io/posts/JS-Arrow-Function/" rel="alternate" type="text/html" title="Javascript Arrow Function" /><published>2021-12-13T17:10:00+09:00</published> <updated>2021-12-13T17:10:00+09:00</updated> <id>https://jotasic.github.io/posts/JS-Arrow-Function/</id> <content src="https://jotasic.github.io/posts/JS-Arrow-Function/" /> <author> <name>Taewoo Kim</name> </author> <category term="강의정리" /> <category term="Javascript ES6+ 제대로 알아보기 - 초급" /> <summary> 들어가며 이 내용은 Javascript ES6+ 제대로 알아보기 - 초급 강의 중 Arrow Function 내용을 정리하였습니다. 강의링크 Arrow function 표기법 const 함수명 = (인자) =&amp;gt; { //함수 구현부 } Arrow function 축약 구현부가 1줄이며, 리턴을 해야되는 값이라면, {} 및 return를 생략할 수 있다. // var fa = function() { // return new Date(); // } const fa = () =&amp;gt; new Date(); 다만 리턴해야되는 값이 객체 선언일때, {}는 함수의 구현부로 인식하므로 ()로 객체를 감싸야 된다. const fo = ... </summary> </entry> <entry><title>Javascript 추가된 Object 기능</title><link href="https://jotasic.github.io/posts/JS-%EC%B6%94%EA%B0%80%EB%90%9C-Object-%EA%B8%B0%EB%8A%A5/" rel="alternate" type="text/html" title="Javascript 추가된 Object 기능" /><published>2021-12-13T12:00:00+09:00</published> <updated>2021-12-13T12:00:00+09:00</updated> <id>https://jotasic.github.io/posts/JS-%EC%B6%94%EA%B0%80%EB%90%9C-Object-%EA%B8%B0%EB%8A%A5/</id> <content src="https://jotasic.github.io/posts/JS-%EC%B6%94%EA%B0%80%EB%90%9C-Object-%EA%B8%B0%EB%8A%A5/" /> <author> <name>Taewoo Kim</name> </author> <category term="강의정리" /> <category term="Javascript ES6+ 제대로 알아보기 - 초급" /> <summary> 들어가며 이 내용은 Javascript ES6+ 제대로 알아보기 - 초급 강의 중 enhanced Object functionalities 내용을 정리하였습니다. 강의링크 Shorthand property 프로퍼티의 key와 value에 할당할 변수명이 동일할 경우 value 생략 가능 기존 var x = 10; var y = 20; var obj = { x: x, y: y } 변경 var x = 10; var y = 20; var obj = { x, y } concised method 메소드를 축약해서 쓸 수 있다. var obj = { name: 'foo', getName () {return this.name} } 기존 선언과 다른점... </summary> </entry> <entry><title>Javascript block scope</title><link href="https://jotasic.github.io/posts/JS-%EB%B8%94%EB%A1%9D%EC%8A%A4%EC%BD%94%ED%94%84/" rel="alternate" type="text/html" title="Javascript block scope" /><published>2021-12-12T22:30:00+09:00</published> <updated>2021-12-12T22:30:00+09:00</updated> <id>https://jotasic.github.io/posts/JS-%EB%B8%94%EB%A1%9D%EC%8A%A4%EC%BD%94%ED%94%84/</id> <content src="https://jotasic.github.io/posts/JS-%EB%B8%94%EB%A1%9D%EC%8A%A4%EC%BD%94%ED%94%84/" /> <author> <name>Taewoo Kim</name> </author> <category term="강의정리" /> <category term="Javascript ES6+ 제대로 알아보기 - 초급" /> <summary> 들어가며 이 내용은 Javascript ES6+ 제대로 알아보기 - 초급 강의 중 Block scope 내용을 정리하였습니다. 강의링크 Block scope Block에 의해 생기는 유효범위 (for, if, while….) var는 block scope에 영향을 받지 않고, let, const만 영향을 받는다. Block scope는 this bind를 하지 않는다. 즉 Block 밖에 있는 this와 동일하다. 예시 var는 Block scope의 영향을 받지 않으므로 이전에 정의된 10을 출력 var a = 10; { console.log(`a`, a); // 10 var a = 10; } const는 Block scope의 영향을 받고, 정의되기... </summary> </entry> </feed>
